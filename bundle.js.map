{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Character/Character.js","webpack:///./src/js/Character/Enemy.js","webpack:///./src/js/Character/HealthBar.js","webpack:///./src/js/Constants/LogosClassNames.js","webpack:///./src/js/Constants/Vocabulary.js","webpack:///./src/js/Constants/namesCollection.js","webpack:///./src/js/Controllers/BattleFieldController.js","webpack:///./src/js/Controllers/GameConfig.js","webpack:///./src/js/Controllers/GameController.js","webpack:///./src/js/Scenes/Score.js","webpack:///./src/js/Scenes/StartPage.js","webpack:///./src/js/Tasks/Logos.js","webpack:///./src/js/Tasks/MathTask.js","webpack:///./src/js/Tasks/Task.js","webpack:///./src/js/Tasks/TranslationTask.js","webpack:///./src/js/Tasks/bundleTasks.js","webpack:///./src/js/app.js","webpack:///./src/style/bundle.css"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AC1EA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC,GAAG,+BAA+B,GAAG,+BAA+B;AACpI;AACA;;AAEA,sE;;;;;;;;;;;;AChBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AChBA;AACA;AACA,C;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACrIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACZA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,WAAW;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,4CAA4C;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,SAAS;AACT;AACA;;AAEA,sF;;;;;;;;;;;;ACzEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wD;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,0D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,2E;;;;;;;;;;;;AC1CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+E;;;;;;;;;;;;AC5IA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gF;;;;;;;;;;;;;;;;AC3CA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,8B;;;;;;;;;;;;;;;ACjDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;;AC3DqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,qE;;;;;;;;;;;;;;;AC1CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yC;;;;;;;;;;;;;;;;;;;;;;AC3BmB;AACG;;;;;;;;;;;;;;;;;;;;;;;;;ACDtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yD;;;;;;;;;;;ACvBA,uC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/app.js\");\n","import HealthBar from \"./HealthBar\";\n\nclass Character {\n    constructor() {\n        this.faceId = 0;\n        this.styleId = 0;\n        this.health = 100;\n    }\n\n    createFigure(character) {\n        let figure = document.createElement('div');\n        this.body = document.createElement('div');\n        this.body.classList.add(character);\n        figure.appendChild(this.body);\n        return figure;\n    }\n\n    createHealthBar(className) {\n        if (!this.healthBar) {\n            this.healthBar = new HealthBar(className);\n        } else {\n            this.renderHealthBar();\n        }\n    }\n\n    renderHealthBar() {\n        this.healthBar.render(this.health);\n    }\n\n    attack(res) {\n        if(res){\n            this.body.className = 'birdy-silent';\n            this.ball.className = 'throwableBird';\n            setTimeout(() => {\n                this.body.classList.add('attack-anim');\n                this.ball.classList.add('bird-fly');\n            }, 3000)\n        }\n        else{\n            this.body.className = 'piggy-silent';\n            this.ball.className = 'throwableRock';\n            setTimeout(() => {\n                this.body.classList.add('attack-anim');\n                this.ball.classList.add('rock-fly');\n            }, 3000)\n        }\n    }\n\n    takeAttack(res) {\n        if(res){\n        this.health = this.health - 25;\n            this.body.className = 'piggy-silent';\n            setTimeout(() => {\n                if (this.health) {\n                    this.body.classList.add('take-damage-anim');\n                } else {\n                    this.body.classList.add('take-damage-final');\n                }\n            }, 3000);\n        }\n        else{\n            this.health = this.health - 25;\n                this.body.className = 'birdy-silent';\n                setTimeout(() => {\n                    if (this.health) {\n                        this.body.classList.add('take-damage-anim');\n                    } else {\n                        this.body.classList.add('take-damage-final');\n                    }\n                }, 3000);\n            }\n    }\n}\n\nexport default Character;","import Character from \"./Character\";\n\nclass Enemy extends Character {\n    constructor(names) {\n        super();\n        this.namesList = names;\n    }\n\n    generateName() {\n        let adjectiveIndex = Math.floor(Math.random() * this.namesList.adjective.length);\n        let nounIndex = Math.floor(Math.random() * this.namesList.noun.length);\n        let nameIndex = Math.floor(Math.random() * this.namesList.name.length);\n        this.name = `${this.namesList.adjective[adjectiveIndex]} ${this.namesList.noun[nounIndex]} ${this.namesList.name[nameIndex]}`;\n    }\n}\n\nexport default Enemy;","class HealthBar {\n    constructor(className) {\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.classList.add('bar', className);\n        this.container = document.getElementById('health-bar');\n        this.container.appendChild(this.canvas);\n    }\n\n    render(health = 100) {\n        this.canvas.width = this.canvas.width\n        this.ctx.fillStyle = \"red\";\n        this.ctx.fillRect(0, 0, this.canvas.width * health / 100, this.canvas.height);\n    }\n}\n\nexport default HealthBar; ","export const CLASS_NAMES = [\n    'apexi','avg','borgwarner','ciay','corvette','holden','logitech','nike','pepsi','sber','tein','vodafone','worthouse', 'lexus', 'tesla', 'rocketbunny', 'tor'\n]","export const VOCABULARY = [\n    {\n        word: 'cat',\n        translation: ['кот', 'кошка', 'котенок', 'киса', 'киска', 'кися',]\n    },\n    {\n        word: 'capital',\n        translation: ['капитал', 'столица', 'состояние']\n    },\n    {\n        word: 'number',\n        translation: ['номер', 'количество', 'число', 'цифра', 'сумма',]\n    },\n    {\n        word: 'crankshaft',\n        translation: ['коленвал', 'кранкшафт']\n    },\n    {\n        word: 'pig',\n        translation: ['свинья', 'свинка', 'хрюша', 'хряк', 'свиноматка']\n    },\n    {\n        word: 'line',\n        translation: ['линия', 'строка', 'строчка', 'направление', 'черта', 'ряд', 'граница']\n    },\n    {\n        word: 'machine',\n        translation: ['машина', 'автомобиль', 'автомат', 'аппарат', 'механизм', 'станок', 'мачине']\n    },\n    {\n        word: 'point',\n        translation: ['точка', 'балл', 'пункт', 'момент', 'очко', 'дело']\n    },\n    {\n        word: 'language',\n        translation: ['язык', 'речь', 'лангуаге']\n    },\n    {\n        word: 'power',\n        translation: ['мощность', 'сила', 'мощь', 'энергия', 'способность', 'повер']\n    },\n    {\n        word: 'money',\n        translation: ['деньги', 'бабки', 'кэш', 'лавэ', 'лаве']\n    },\n    {\n        word: 'market',\n        translation: ['рынок', 'базар', 'торговля', 'маркет', 'сбыт', 'магазин']\n    },\n    {\n        word: 'report',\n        translation: ['доклад', 'отчет', 'сообщение', 'рапорт', 'репортаж', 'донесение', 'малява']\n    },\n    {\n        word: 'friend',\n        translation: ['друг', 'подруга', 'приятель', 'знакомый', 'товарищ', 'брат', 'братан', 'братишка']\n    },\n    {\n        word: 'parent',\n        translation: ['родитель', 'предок', 'родительница', 'причина', 'праотец', 'прародитель']\n    },\n    {\n        word: 'person',\n        translation: ['человек', 'лицо', 'личность', 'особа', 'персонаж', 'субъект']\n    },\n    {\n        word: 'reason',\n        translation: ['причина', 'повод', 'основание', 'резон', 'разум', 'рассудок', 'довод']\n    },\n    {\n        word: 'morning',\n        translation: ['утро', 'утренняя заря', 'начало', 'ранний период']\n    },\n    {\n        word: 'figure',\n        translation: ['рисунок', 'цифра', 'фигура', 'диаграмма', 'образ', 'личность']\n    },\n    {\n        word: 'price',\n        translation: ['цена', 'расценка', 'ценность', 'жертва', 'ргисе']\n    },\n    {\n        word: 'support',\n        translation: ['поддержка', 'помощь', 'опора', 'подставка', 'суппорт', 'кронштейн']\n    },\n    {\n        word: 'health',\n        translation: ['здоровье', 'самочувствие', 'здравие', 'жизнеспособность', 'благосостояние', 'хп']\n    },\n    {\n        word: 'field',\n        translation: ['поле', 'область', 'месторождение', 'пространство', 'поприще']\n    },\n    {\n        word: 'example',\n        translation: ['пример', 'образец', 'экземпляр', 'урок', 'ехампле']\n    },\n    {\n        word: 'paper',\n        translation: ['бумага', 'документ', 'обои', 'рарег']\n    },\n    {\n        word: 'table',\n        translation: ['стол', 'таблица', 'расписание', 'доска', 'трапеза', 'плита']\n    },\n    {\n        word: 'animal',\n        translation: ['животное', 'зверь', 'скотина', 'тварь']\n    },\n    {\n        word: 'picture',\n        translation: ['рисунок', 'картина', 'изображение', 'картинка', 'представление', 'образ']\n    },\n    {\n        word: 'child',\n        translation: ['ребенок', 'малыш', 'младенец', 'потомок']\n    },\n    {\n        word: 'horse',\n        translation: ['лошадь', 'конь', 'конница', 'кавалерия', 'козлы', 'рама', 'лошадка']\n    },\n    {\n        word: 'color',\n        translation: ['цвет', 'краска', 'колорит', 'оттенок', 'свет', 'тон']\n    },\n    {\n        word: 'summer',\n        translation: ['лето', 'год', 'балка']\n    },\n    {\n        word: 'letter',\n        translation: ['письмо', 'буква', 'символ', 'послание', 'литера', 'шрифт']\n    }\n]","const NAMES_COLLECTION = {\n    adjective: [\n        'Dirty', 'Muddy', '','Crazy', 'Gaaangsta', 'The', '', 'Grubby', 'Grimy', 'Leery', 'Rummy', 'Brutish', 'Tricky'\n    ],\n    noun: [\n        'Pig', 'Hog', 'Sow', '', 'Pork', 'Hidden', 'Boar', 'Fat', '', 'Green', 'Vealy'\n    ],\n    name: [\n        'Hector', 'Hambo', 'Hamlet', 'Hamilton', 'Hamburger', 'Smokey', 'Slim', 'Bacondall', 'Willbur'\n    ]\n};\n\nexport default NAMES_COLLECTION;\n\n","class BattleFieldController {\n    constructor(score) {\n        this.score = score;\n        this.battlePage = document.getElementById('battle-field');\n        this.playerNameField = document.getElementById('player-name');\n        this.opponentNameField = document.getElementById('opponent-name');\n        this.levelField = document.getElementById('game-level');\n        this.gameResultPage = document.getElementById('game-result-page'); \n        this.winGameWindow = document.getElementById('win-game-window');\n        this.loseGameWindow = document.getElementById('lose-game-window');\n        this.scoreContainer = document.getElementById('score-container');\n        this.solvedTasksElement = document.getElementById('final-score-task');\n        this.amountOfVictories = document.getElementById('number-of-victories');\n    }\n\n    init(locationId) {\n        this.battlePage.className = 'battle-field';\n        this.battlePage.classList.add(`${locationId}-location`);\n    }\n\n    render(player, opponent) {\n        if (this.opponentFigure) {\n            this.battlePage.removeChild(this.playerFigure);\n            this.battlePage.removeChild(this.opponentFigure);\n        };\n        this.createPlayer(player);\n        this.createEnemy(opponent);\n    }\n\n    createPlayer(player) {\n        this.player = player;\n        this.playerFigure = this.player.createFigure('birdy-silent');\n        this.playerFigure.classList.add('player-container');\n        this.player.ball = document.createElement('div');\n        this.player.ball.classList.add('throwableBird');\n        this.playerNameField.textContent = this.player.name;\n        this.playerFigure.appendChild(this.player.ball);\n        this.battlePage.appendChild(this.playerFigure);\n        this.player.renderHealthBar();\n    }\n\n    createEnemy(opponent) {\n        this.opponent = opponent;\n        this.opponent.health = 100;\n        this.opponentFigure = this.opponent.createFigure('piggy-silent');\n        this.opponentFigure.classList.add('opponent-container');\n        this.opponent.ball = document.createElement('div');\n        this.opponent.ball.classList.add('throwableRock');\n        this.opponentNameField.textContent = this.opponent.name;\n        this.levelField.textContent = this.opponent.level;\n        this.opponentFigure.appendChild(this.opponent.ball);\n        this.battlePage.appendChild(this.opponentFigure);\n        this.opponent.renderHealthBar();\n    }\n\n    showScoreWindow(level, solvedTasks) {\n        this.solvedTasksElement.textContent = solvedTasks;\n        this.amountOfVictories.textContent = level - 1;\n        this.score.refreshScore({name: this.player.name, result: solvedTasks});\n        this.score.showScore(this.scoreContainer);\n    }\n\n    showFinalWindow(result, level, solvedTasks) {\n        setTimeout(() => {\n            if (level) {\n                this.showScoreWindow(level, solvedTasks);\n            };\n            this.gameResultPage.classList.remove('hidden');\n            this[`${result}GameWindow`].classList.remove('hidden');\n        }, 1000);\n    }\n}\n\nexport default BattleFieldController;","class GameConfig {\n    constructor(player, gameController) {\n        this.player = player;\n        this.GameController = gameController;\n        this.selectLocationPage = document.getElementById('location-select');\n        this.playerConfigPage = document.getElementById('config-page');\n        this.playerFigure = document.getElementById('player-figure');\n        this.nameInput = document.getElementById('player-name-input');\n        document.addEventListener('click', (e) => this.changeConfig(e));\n    }\n\n    selectLocation(e) {\n        this.locationId = e.target.id;\n        this.showPlayerConfigPage();\n    }\n\n    showPlayerConfigPage() {\n        this.playerConfigPage.classList.remove('hidden');\n        this.selectLocationPage.classList.add('hidden');    \n    }\n\n   changeConfig(e) {\n        if (e.target.id === 'submit-button') {\n            this.compileConfig();\n        } else if (e.target.classList.contains('location-item')) {\n            this.selectLocation(e);\n        }\n    }\n\n    compileConfig() {\n        if (this.nameInput.value) {\n            this.player.name = this.nameInput.value;\n            this.playerConfigPage.classList.add('hidden');            \n            this.GameController.init(this.player, this.locationId);\n            this.GameController.initGame();\n            this.nameInput.value = \"\";\n        } else {\n            this.nameInput.classList.add('empty-input')\n        }\n    }\n}\n\nexport default GameConfig; ","class GameController {\n    constructor(battleField, enemy, tasks) {\n        this.battlefield = battleField;\n        this.opponent = enemy;\n        this.tasksList = tasks;\n        this.task = null;\n        this.activeAttack = false;\n        this.startPage = document.getElementById('start-page');\n        this.attackConfigPage = document.getElementById('attack-config-page');\n        this.attackTypeWindow = document.getElementById('attack-type');\n        this.taskTypeWindow = document.getElementById('task-type');\n        this.attackButton = document.getElementById('attack-button');\n        this.taskSection = document.getElementById('task-field');\n        document.addEventListener('click', (e) => this.handleEvents(e));\n        document.addEventListener('keydown', (e) => this.keyboardControl(e));\n        \n    }\n\n    init(player, location) {\n        this.level = 1;\n        this.solvedTasks = 0;\n        this.player = player;\n        this.gameStatus = null;\n        this.player.createHealthBar('player-health-bar');\n        this.opponent.createHealthBar('opponent-health-bar');\n        this.battlefield.init(location);\n    }\n\n    initGame() {\n        this.createOpponent();\n        this.battlefield.render(this.player, this.opponent);\n    }\n\n    handleEvents(e) {\n        debugger\n        if (e.target.id === 'attack-button' && !this.activeAttack) {\n            this.startAttack(e);\n        } else if (e.target.id === 'next-game-button') {\n            this.startNextRound();\n        } else if (e.target.classList.contains('exit-button')) {\n            this.exitToMenu(e);\n        } else if (e.target.classList.contains('attack-type-item')) {\n            this.selectAttackType(e)\n        } else if (e.target.classList.contains('task-type-item')) {\n            this.selectTaskType(e)\n        } else if (e.target.id === 'check-result') {\n            this.checkAnswer();\n        }\n    }\n\n    keyboardControl(e) {\n        if (e.keyCode === 13 && !this.taskSection.classList.contains('hidden')) {\n            this.checkAnswer();\n        }\n    }\n\n    startAttack (e) {\n        this.attackConfigPage.classList.remove('hidden');\n        this.taskTypeWindow.classList.remove('hidden');\n        e.target.classList.contains('attack-button-animation') ? e.target.classList.remove('attack-button-animation') : null;\n    }\n\n    startNextRound () {\n        this.level++;\n        this.initGame();\n        this.battlefield.gameResultPage.classList.add('hidden');\n        this.battlefield.winGameWindow.classList.add('hidden');\n    }\n\n    exitToMenu (e) {\n        let resultWindow = `${this.gameStatus}GameWindow`;\n        this.battlefield.gameResultPage.classList.add('hidden');\n        this.battlefield[resultWindow].classList.add('hidden');\n        this.battlefield.battlePage.classList.add('hidden');\n        this.startPage.classList.remove('hidden');\n        this.player.health = 100;\n    }\n\n    createOpponent() {\n        this.opponent.level = this.level;\n        this.opponent.generateName();\n    }\n\n    selectAttackType(e) {\n        this.attackType = e.target.id;\n        this.attackTypeWindow.classList.add('hidden');\n        this.taskTypeWindow.classList.remove('hidden');\n    }\n\n    selectTaskType(e) {\n        this.attackConfigPage.classList.add('hidden');\n        this.taskTypeWindow.classList.add('hidden');\n        this.task = this.tasksList[e.target.id];\n        this.tasksList[e.target.id].init();\n    }\n\n    checkAnswer() {\n        let result = this.task.checkResult();\n        this.activeAttack = true;\n        if (result) {\n            this.solvedTasks++;\n            this.player.attack(result);\n            this.opponent.takeAttack(result);\n            setTimeout(() => {\n                this.task.correctAnswer();\n            }, 400);\n            setTimeout(() => {\n                this.opponent.healthBar.render(this.opponent.health);\n                this.activeAttack = false;\n                this.checkVictory();\n            }, 6000);\n        } else {\n            this.opponent.attack(result);\n            this.player.takeAttack(result);\n            setTimeout(() => {\n                this.task.wrongAnswer();\n            }, 400);\n            setTimeout(() => {\n                this.player.healthBar.render(this.player.health);\n                this.activeAttack = false;\n                this.checkLosing();\n            }, 6000);\n        }\n    }\n\n    checkVictory() {\n        if (!this.opponent.health) {\n            this.gameStatus = 'win';\n            this.battlefield.showFinalWindow(this.gameStatus);\n        }\n    }\n\n    checkLosing() {\n        if (!this.player.health) {\n            this.gameStatus = 'lose';\n            this.battlefield.showFinalWindow(this.gameStatus, this.level, this.solvedTasks);\n        }\n    }\n}\n\nexport default GameController;","class Score {\n    constructor() {\n    }\n\n    refreshScore(player) {\n        if (!localStorage['angry-birds']) {\n            localStorage['angry-birds'] = JSON.stringify([player]);\n        } else {\n            let score = JSON.parse(localStorage['angry-birds']);\n            score.push(player);\n            score.sort((a,b) => b.result - a.result);\n            score.length > 10 ? score.pop() : score;\n            localStorage['angry-birds'] = JSON.stringify(score);\n        }\n    }\n\n    showScore(wrapper) {\n        wrapper.innerHTML = '';\n        if (!localStorage['angry-birds']) {\n            wrapper.textContent = \"Score list is empty...\"\n        } else {\n            const scoreList = document.createElement('ol');\n            const topScore = JSON.parse(localStorage['angry-birds']);\n            topScore.forEach(item => this.createScoreItem (item, scoreList));\n            wrapper.appendChild(scoreList);\n        }\n    }\n\n    createScoreItem(item, list) {\n        const scoreItem = document.createElement('li');\n        const itemWrapper = document.createElement('div');\n        const name = document.createElement('div');\n        const score = document.createElement('div');\n        itemWrapper.classList.add('score-item');\n        name.textContent = item.name;\n        score.textContent = item.result;\n        itemWrapper.appendChild(name);\n        itemWrapper.appendChild(score);\n        scoreItem.appendChild(itemWrapper);\n        list.appendChild(scoreItem);\n    }\n}\n\nexport default Score;","class StartPage {\n    constructor() {\n        this.startPage = document.getElementById('start-page');\n        this.menu = document.getElementById('main-menu');\n        this.scoreSection = document.getElementById('main-score-section');\n        this.scoreContainer = document.getElementById('main-score-container');\n        this.aboutSection = document.getElementById('main-about-section');\n        this.startPage.addEventListener('click', (e) => this.handleEvents(e));\n    }\n\n    init(score) {\n        this.score = score;\n    }\n\n    handleEvents(e) {\n        let id = e.target.id;\n        switch (id) {\n            case 'new-game':  \n                this.startGame();\n                break;\n            case 'about': \n                this.showGameDescription();\n                break;\n        }\n\n        if (e.target.classList.contains('close-button')) {\n            this.menu.classList.remove('hidden');\n            e.target.parentNode.classList.add('hidden');\n        }\n    }\n\n    startGame() {\n        this.selectLocationPage = document.getElementById('location-select');\n        this.selectLocationPage.classList.remove('hidden');\n        this.startPage.classList.add('hidden');\n    }\n\n    showGameDescription() {\n        this.aboutSection.classList.remove('hidden');\n        this.menu.classList.add('hidden');\n    }\n}\n\nexport default new StartPage();","import Task from \"./Task\";\nimport { CLASS_NAMES } from \"../Constants/LogosClassNames\";\n\nclass LogosTask extends Task {\n    constructor() {\n        super();\n        this.classNamesArray = CLASS_NAMES;\n        this.taskWrapper = document.getElementById('logos-task-field');\n        this.itemsWrapper = document.getElementById('logo-wrapper');\n        this.nameSpan = document.getElementById('logo-name');\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\n    }\n\n    init() {\n        super.init();\n        this.itemsWrapper.innerHTML = '';\n        this.selectedItem = null;\n        this.shuffleArray(this.classNamesArray);\n        this.logo = this.classNamesArray[0];\n        this.nameSpan.textContent = this.classNamesArray[0].toUpperCase();\n        this.otherLogos = this.classNamesArray.slice(1, 3);\n        this.allItems = this.otherLogos.concat(this.logo);\n        this.shuffleArray(this.allItems);\n        this.createField();\n    }\n\n    createField() {\n        this.allItems.forEach((item) => {\n            let image = document.createElement('div');\n            image.classList.add(item);\n            this.itemsWrapper.appendChild(image);\n        })\n    }\n\n    selectImage(e) {\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\n            e.target.classList.add('selected-logo');\n            this.selectedItem ? this.selectedItem.classList.remove('selected-logo') : null;\n            this.selectedItem = e.target;\n        }\n    }\n\n    checkResult() {\n        if (this.selectedItem && this.selectedItem.classList.contains(this.logo)) {\n            return true;\n        } else return false;\n    }\n}\n\nexport const Logos = new LogosTask();","import Task from \"./Task\";\n\nclass MathExerciseTask extends Task {\n    constructor() {\n        super();\n        this.result = document.getElementById('result');\n        this.operations = ['+', '-', '*', '/'];\n        this.taskWrapper = document.getElementById(\"math-task-field\");\n        this.firstElement = document.getElementById('first-number');\n        this.operator = document.getElementById('operation');\n        this.secondElement = document.getElementById('second-number');\n    }\n\n    init() {\n        super.init();\n        this.result.value = '';\n        this.generateOperation();\n    }\n\n    generateOperation() {\n        let index = Math.floor(Math.random() * this.operations.length);\n        this.generateNumbers(this.operations[index]);\n    }\n\n    generateNumbers(operation) {\n        switch (operation) {\n            case '+':  \n                this.firstNumber = Math.floor(Math.random() * 100);\n                this.secondNumber = Math.floor(Math.random() * 100);\n                this.answer = this.firstNumber + this.secondNumber;\n                break;\n            case '-': \n                this.secondNumber = Math.floor(Math.random() * 100);\n                this.firstNumber = Math.floor(Math.random() * 100) + this.secondNumber;\n                this.answer = this.firstNumber - this.secondNumber;\n                break;\n            case '/': \n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\n                this.firstNumber = this.secondNumber * (Math.floor(Math.random() * 10) + 1);\n                this.answer = this.firstNumber / this.secondNumber;\n                break;\n            case '*': \n                this.firstNumber = Math.floor(Math.random() * 100) + 1;\n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\n                this.answer = this.firstNumber * this.secondNumber;\n                break;\n        }\n        this.firstElement.textContent = this.firstNumber;\n        this.operator.textContent = operation;\n        this.secondElement.textContent = this.secondNumber;\n    }\n\n    checkResult() {\n        if (+this.result.value === this.answer) {\n            return true;\n        } else return false\n    }\n}\n\nexport const MathTask = new MathExerciseTask();\n\n","import { VOCABULARY } from \"../Constants/Vocabulary\";\n\nclass Task {\n    constructor() {\n        this.vocabulary = VOCABULARY;\n        this.taskSection = document.getElementById('task-field');\n        this.correctAnswerField = document.getElementById('correct-answer');\n        this.wrongAnswerField = document.getElementById('wrong-answer');\n    }\n\n    init() {\n        this.taskSection.classList.remove('hidden');\n        this.taskWrapper.classList.remove('hidden');\n    }\n    \n    shuffleArray(array) {\n        let i = array.length - 1\n        for (i; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    correctAnswer() {\n        this.taskSection.classList.add('hidden');\n        this.taskWrapper.classList.add('hidden');\n        this.correctAnswerField.classList.remove('hidden');\n        setTimeout(() => {\n            this.correctAnswerField.classList.add('hidden');\n        }, 1000);\n    }\n\n    wrongAnswer() {\n        this.taskSection.classList.add('hidden');\n        this.taskWrapper.classList.add('hidden');\n        this.wrongAnswerField.classList.remove('hidden');\n        setTimeout(() => {\n            this.wrongAnswerField.classList.add('hidden');\n        }, 1000);\n    }\n}\n\nexport default Task;","import Task from \"./Task\";\n\nclass TranslationTask extends Task {\n    constructor() {\n        super();\n        this.taskWrapper = document.getElementById('translation-task-field');\n        this.wordContainer = document.getElementById('word-for-translation');\n        this.answerInput = document.getElementById('translation-input');\n    }\n\n    init() {\n        super.init();\n        this.answerInput.value = '';\n        let index = Math.floor(Math.random() * this.vocabulary.length);\n        this.word = this.vocabulary[index].word;\n        this.translations = this.vocabulary[index].translation;\n        this.wordContainer.textContent =  this.word.toUpperCase();\n    }\n\n    checkResult() {\n        this.answer = this.answerInput.value.toLowerCase();\n        if (this.translations.indexOf(this.answer) !== -1) {\n           return true;\n        } else return false;\n    }\n}\n\nexport const Translation = new TranslationTask()","export { MathTask } from \"./MathTask\";\nexport { Translation } from \"./TranslationTask\";\nexport { Logos } from \"./Logos\";","import StartPage from \"./Scenes/StartPage\";\nimport GameConfig from \"./Controllers/GameConfig\";\nimport Character from \"./Character/Character\";\nimport Enemy from \"./Character/Enemy\";\nimport BattleFieldController from \"./Controllers/BattleFieldController\";\nimport GameController from \"./Controllers/GameController\";\nimport NAMES from \"./Constants/namesCollection\";\nimport Score from \"./Scenes/Score\";\nimport * as Tasks from \"./Tasks/bundleTasks\";\nimport style from '../style/bundle.css';\n\n\nconst score = new Score();\nconst player = new Character();\nconst opponent = new Enemy(NAMES);\nconst battleField = new BattleFieldController(score);\nconst gameController = new GameController(battleField, opponent, Tasks);\nconst gameConfig = new GameConfig(player, gameController);\n\nconst initApp = function () {\n    StartPage.init(score);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initApp());","// extracted by mini-css-extract-plugin"],"sourceRoot":""}